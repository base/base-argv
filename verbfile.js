'use strict';

var argv = require('minimist')(process.argv.slice(2));
var path = require('path');

module.exports = function(verb, base, env) {
  base.on('error', function(err) {
    console.log(err.stack);
  });

  verb.include('install-npm.md', {
    content: [
      'Install with [npm](https://www.npmjs.com/)',
      '',
      '```sh',
      '$ npm i base-argv --save',
      '```'
    ].join('\n')
  });

  verb.include('tests.md', {
    content: [
      'Install dev dependencies:',
      '',
      '```sh',
      '$ npm i -d && npm test',
      '```'
    ].join('\n')
  });

  verb.include('contributing.md', {
    content: 'Pull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/{%= author.username %}/{%= name %}/issues/new).'
  });

  verb.include('author.md', {
    content: [
      '**{%= author.name %}**',
      '',
      '+ [github/{%= author.username %}](https://github.com/{%= author.username %})',
      '+ [twitter/{%= author.twitter %}](http://twitter.com/{%= author.twitter %})'
    ].join('\n')
  });

  verb.include('footer.md', {
    content: '_This file was generated by [{%= runner.name %}]({%= runner.url %}) on {%= date() %}._'
  });

  var name = verb.name;
  var user = base.store.get('author.username');
  verb.data({repo: user + '/' + name});

  // verb.helper('shield', function() {
  //   return 'https://img.shields.io/travis/USER/REPO.svg';
  // });

  verb.data({
    badge: {
      travis: '[![Build Status](https://img.shields.io/travis/{%= repo %}.svg)](https://travis-ci.org/{%= repo %})',
      npm: '[![NPM version](https://img.shields.io/npm/v/{%= name %}.svg)](https://www.npmjs.com/package/{%= name %})',
      coveralls: '[![Coverage Status](https://img.shields.io/coveralls/{%= repo %}.svg)](https://coveralls.io/r/{%= repo %})'
    },
  });

  verb.data({license: 'Released under the MIT license.'});

  base.questions.set('author.twitter', 'Author\'s twitter username?');
  if (argv.init) {
    base.questions.options.force = true;
  }

  verb.task('default', function(cb) {
    base.ask(function(err, answers) {
      if (err) return cb(err);

      verb.toStream('docs')
        .pipe(verb.renderFile('text', answers))
        .on('error', cb)
        .pipe(verb.dest(dest('readme.md')))
        .on('finish', cb);
    });
  });
};

/**
 * Rename template files
 */

function dest(dest) {
  return function(file) {
    file.base = path.dirname(dest);
    file.path = dest;
    file.basename = file.basename.replace(/^_/, '.');
    file.basename = file.basename.replace(/^\$/, '');
    return file.base;
  };
}
